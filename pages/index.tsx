import Head from 'next/head'
import Table from '@/components/table'
import axios from 'axios'
import { useEffect, useState } from 'react'
import Modal from '@/components/modal'
import { UserColumns } from "./utils/columns"
import DatePicker from "react-datepicker";
import moment from 'moment'

export default function Home() {
  const [users, setUsers] = useState([])
  const getUsers = async () => {
    const res = await axios.get(`https://dummyjson.com/users`)
    setUsers(res.data.users)
  }

  const [rows, setRows] = useState([])
  const [eachRow, setEachRow] = useState<any>()
  const [isOpen, setIsOpen] = useState(false)
  const [searchUsers, setSearchUsers] = useState([])
  const [isFiltering, setIsFiltering] = useState<boolean>(false)

  const [searchValue, setSearchValue] = useState("")
  const handleChange = (e) => {
    setSearchValue(e.target.value)
  }
  const [selectValue, setSelectValue] = useState("")
  const handleSelectChange = (e) => {
    setSelectValue(e.target.value)
  }

  const handleUpdatedData = () => {
    const filteredUsers = users.filter((user) => {
      return user[selectValue].toString().toLowerCase().includes(searchValue.toLowerCase())
    })
    setSearchUsers(filteredUsers)
  }

  useEffect(() => {
    getUsers()
  }, [])

  useEffect(() => {
    handleUpdatedData()
    setIsFiltering(true)
  }, [searchValue])

  useEffect(() => {
    setSelectValue("firstName")
  }, [])

  const filterColumn = UserColumns.filter((column) => {
    return column.id !== "image" && column.id !== "birthDate"
  })

  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(null);
  const onChange = (dates) => {
    const [start, end] = dates;
    setStartDate(start);
    setEndDate(end);
  };

  const handleUpdatedDataByDate = () => {
    const filteredUsers = users.filter((user) => {
      return moment(user.birthDate).isBetween(startDate, endDate);
    })
    setSearchUsers(filteredUsers)
  }

  useEffect(() => {
    if (endDate === null) {
      setIsFiltering(false)
    } else {
      handleUpdatedDataByDate()
      setIsFiltering(true)
    }
  }, [endDate])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='bg-black min-h-screen ' >
        <div className='w-5/6 mx-auto p-6' >
          <div className='flex items-center justify-between' >
            <div className='flex items-center' >


              {selectValue === "gender" ?
                <select className='my-3 p-2 outline-none bg-black text-white border  border-white ' onChange={handleChange} placeholder="CHoose" >
                  {["Male", "Female"].map((column, index) => {
                    return (<option key={index} value={column} > {column} </option>)
                  })}
                </select> :
                <input
                  type={`${selectValue === "age" ? "number" : "text"}`}
                  placeholder="Filter ..."
                  className='my-3 p-2 outline-none w-80 bg-black text-white border  border-white'
                  value={searchValue} onChange={handleChange}
                />}


              <select className='my-3 p-2 ml-3 outline-none bg-black text-white border  border-white ' onChange={handleSelectChange} >
                {filterColumn.map((column) => {
                  return (<option key={column.id} value={column.id}> {column.name} </option>)
                })}
              </select>
              <p className='text-white capitalize text-medium ml-3' >You are currently filtering by  {selectValue}</p>
            </div>
            <div>
              <DatePicker
                className='my-3 p-2 outline-none w-80 bg-black text-white border  border-white'
                selected={startDate}
                onChange={onChange}
                startDate={startDate}
                endDate={endDate}
                showYearDropdown
                scrollableYearDropdown
                yearDropdownItemNumber={50}
                selectsRange
                monthsShown={2}
                isClearable
                placeholderText='Filter Date of Birth'
              />
            </div>
          </div>

          <Table
            columns={UserColumns}
            data={isFiltering ? searchUsers : users}
            setSelectedRow={(selectableRows) => setRows(selectableRows)}
            setEachRow={(row) => setEachRow(row)}
            setIsOpen={setIsOpen}
          />

          <div className='mt-5' >
            <h1 className='text-xl text-white' >Name of Users Selected :</h1>
            <ol className='flex flex-col list-disc ' >
              {rows.map((row) => {
                return (<li key={row.id} className="text-xl text-white" > {row.firstName} {row.lastName} </li>)
              })}
            </ol>
          </div>
        </div>
      </div>

      <Modal isOpen={isOpen} setIsOpen={setIsOpen} >
        <>
          <div className='flex flex-col' >
            <span > {eachRow?.firstName} {eachRow?.lastName} </span>
            <span > {eachRow?.email} </span>
            <span > {eachRow?.phone}  </span>
            <span > {eachRow?.username}  </span>
            <span > {eachRow?.birthDate}  </span>
          </div>
        </>
      </Modal>
    </>
  )
}
